# Generated by Django 5.2.5 on 2025-09-15 12:52

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('sector', models.CharField(blank=True, choices=[('TECHNOLOGY', 'Technology'), ('HEALTHCARE', 'Healthcare'), ('FINANCIAL', 'Financial Services'), ('CONSUMER_DISCRETIONARY', 'Consumer Discretionary'), ('INDUSTRIALS', 'Industrials'), ('CONSUMER_STAPLES', 'Consumer Staples'), ('ENERGY', 'Energy'), ('UTILITIES', 'Utilities'), ('REAL_ESTATE', 'Real Estate'), ('MATERIALS', 'Materials'), ('COMMUNICATION', 'Communication Services'), ('OTHER', 'Other')], max_length=30)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('market_cap_category', models.CharField(blank=True, choices=[('LARGE_CAP', 'Large Cap ($10B+)'), ('MID_CAP', 'Mid Cap ($2B-$10B)'), ('SMALL_CAP', 'Small Cap ($300M-$2B)'), ('MICRO_CAP', 'Micro Cap (<$300M)')], max_length=20)),
                ('current_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('previous_close', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('day_change', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('day_change_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('pe_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('pb_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('dividend_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('esg_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['symbol'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='My Portfolio', max_length=100)),
                ('initial_capital', models.DecimalField(decimal_places=2, default=Decimal('100000.00'), max_digits=12)),
                ('current_capital', models.DecimalField(decimal_places=2, default=Decimal('100000.00'), max_digits=12)),
                ('total_invested', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_rebalance', models.BooleanField(default=False)),
                ('rebalance_frequency', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('MANUAL', 'Manual')], default='MONTHLY', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)])),
                ('investment_experience', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('risk_tolerance', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('volatility_comfort', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('loss_tolerance', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=4)),
                ('recommended_risk_level', models.CharField(choices=[('CONSERVATIVE', 'Conservative'), ('MODERATE', 'Moderate'), ('AGGRESSIVE', 'Aggressive')], max_length=20)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trade_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], max_length=10)),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('EXECUTED', 'Executed'), ('CANCELLED', 'Cancelled'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='soulstrader.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='soulstrader.stock')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('RECOMMENDATION', 'New Recommendation'), ('TRADE_EXECUTED', 'Trade Executed'), ('PORTFOLIO_ALERT', 'Portfolio Alert'), ('MARKET_UPDATE', 'Market Update'), ('REBALANCE_REMINDER', 'Rebalance Reminder')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(choices=[('CONSERVATIVE', 'Conservative'), ('MODERATE', 'Moderate'), ('AGGRESSIVE', 'Aggressive')], default='MODERATE', max_length=20)),
                ('investment_goal', models.CharField(choices=[('GROWTH', 'Growth'), ('INCOME', 'Income'), ('PRESERVATION', 'Capital Preservation'), ('BALANCED', 'Balanced')], default='BALANCED', max_length=20)),
                ('time_horizon', models.CharField(choices=[('SHORT', 'Short Term (1-3 years)'), ('MEDIUM', 'Medium Term (3-7 years)'), ('LONG', 'Long Term (7+ years)')], default='MEDIUM', max_length=10)),
                ('initial_capital', models.DecimalField(decimal_places=2, default=Decimal('100000.00'), max_digits=12)),
                ('max_positions', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('max_position_size', models.DecimalField(decimal_places=2, default=Decimal('10.00'), max_digits=5)),
                ('preferred_sectors', models.JSONField(blank=True, default=list)),
                ('preferred_market_cap', models.CharField(choices=[('LARGE_CAP', 'Large Cap'), ('MID_CAP', 'Mid Cap'), ('SMALL_CAP', 'Small Cap'), ('MIXED', 'Mixed')], default='LARGE_CAP', max_length=20)),
                ('esg_focused', models.BooleanField(default=False)),
                ('esg_score_minimum', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('daily_summary', models.BooleanField(default=True)),
                ('recommendation_alerts', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_return', models.DecimalField(decimal_places=2, max_digits=8)),
                ('daily_return', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('sharpe_ratio', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('max_drawdown', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('volatility', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('beta', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('cash_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sector_diversification', models.JSONField(blank=True, default=dict)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='soulstrader.portfolio')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('portfolio', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('average_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('purchase_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='soulstrader.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='soulstrader.stock')),
            ],
            options={
                'unique_together': {('portfolio', 'stock')},
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('STRONG_BUY', 'Strong Buy'), ('BUY', 'Buy'), ('HOLD', 'Hold'), ('SELL', 'Sell'), ('STRONG_SELL', 'Strong Sell')], max_length=20)),
                ('confidence_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('VERY_HIGH', 'Very High')], max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('target_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stop_loss', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('reasoning', models.TextField()),
                ('technical_analysis', models.JSONField(blank=True, default=dict)),
                ('fundamental_analysis', models.JSONField(blank=True, default=dict)),
                ('sentiment_analysis', models.JSONField(blank=True, default=dict)),
                ('risk_assessment', models.JSONField(blank=True, default=dict)),
                ('risk_adjusted', models.BooleanField(default=True)),
                ('user_risk_level', models.CharField(choices=[('CONSERVATIVE', 'Conservative'), ('MODERATE', 'Moderate'), ('AGGRESSIVE', 'Aggressive')], max_length=20)),
                ('portfolio_fit', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='soulstrader.stock')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'stock', 'created_at')},
            },
        ),
        migrations.CreateModel(
            name='StockPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('open_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('close_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('volume', models.BigIntegerField()),
                ('adjusted_close', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='soulstrader.stock')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('stock', 'date')},
            },
        ),
    ]
